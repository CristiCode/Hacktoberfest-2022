#include <bits/stdc++.h>
using namespace std;
class PriorityQueue {
	std::vector<int> pq;
public:
	PriorityQueue() {

	}

	bool isEmpty()
	{
		return pq.size() == 0;
	}

	int getSize()
	{
		return pq.size();
	}

	int getMin()
	{
		if (isEmpty()) {
			cout << "Empty\n";
			return -1;
		}
		return pq[0];
	}

	int remove()
	{
		int ans = pq[0];
		swap(pq[0], pq.back());

		pq.pop_back();
		int parentIndex = 0;
		while (parentIndex != pq.size() - 1)
		{
			int li = parentIndex * 2 + 1;
			int ri = parentIndex * 2 + 2;
			int idx = parentIndex;
			if (li < pq.size() and pq[li] < pq[idx])
			{
				idx = li;
			}
			if (ri < pq.size() and pq[ri] < pq[idx])
			{
				idx = ri;
			}
			if (idx == parentIndex)break;
			swap(pq[idx], pq[parentIndex]);
			parentIndex = idx;
		}
		return ans;
	}

	void insert(int val)
	{
		pq.push_back(val);

		int childIndex = pq.size() - 1;

		// Down Hipify
		while (childIndex > 0) {

			int parentIndex = (childIndex - 1) / 2;

			if (pq[childIndex] < pq[parentIndex])
			{
				swap(pq[childIndex], pq[parentIndex]);
			}
			else
			{
				break;
			}

			childIndex = parentIndex;
		}
	}
};

int main(int argc, char const *argv[])
{
  PriorityQueue pq;
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int x;
		cin >> x;
		pq.insert(x);
	}
	while (pq.getSize())
	{
		cout << pq.remove() << " ";
	}
}
